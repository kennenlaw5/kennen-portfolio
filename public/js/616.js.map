{"version":3,"file":"js/616.js","mappings":"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","sources":["webpack:///./resources/js/components/TicTacToe/constants/TicTacToeConstants.ts","webpack:///./resources/js/components/TicTacToe/helpers.ts","webpack:///./resources/js/components/TicTacToe/context/TicTacToeContext.tsx","webpack:///./resources/js/components/TicTacToe/LetterSelect.tsx","webpack:///./resources/js/components/TicTacToe/Board.tsx","webpack:///./resources/js/components/TicTacToe/ResetButton.tsx","webpack:///./resources/js/components/TicTacToe/ModeSelect.tsx","webpack:///./resources/js/components/TicTacToe/WinnerAnnouncement.tsx","webpack:///./resources/js/components/TicTacToe/TieAnnouncement.tsx","webpack:///./resources/js/components/TicTacToe/GameResult.tsx","webpack:///./resources/js/components/TicTacToe/TurnTracker.tsx","webpack:///./resources/js/components/TicTacToe/BoardHelper.tsx","webpack:///./resources/js/components/TicTacToe/TicTacToe.tsx","webpack:///./resources/js/pages/Games.tsx","webpack:///./node_modules/classnames/index.js"],"sourcesContent":["export const PLAYER_LETTERS = {\n    X: 'X',\n    O: 'O',\n};\nexport const GAME_MODES = {\n    COMPUTER: 'computer',\n    PERSON: 'person',\n};\nexport const DIFFICULTIES = {\n    EASY: 'easy',\n    NORMAL: 'normal',\n    HARD: 'hard',\n};\nexport const WINNING_COMBOS = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\n    [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\n    [0, 4, 8], [2, 4, 6] // Diagonals\n];\n","import { DIFFICULTIES, WINNING_COMBOS } from 'Components/TicTacToe/constants/TicTacToeConstants';\nexport const getIsWinningMove = (board, moveIndex) => {\n    return WINNING_COMBOS\n        .filter((combo) => combo.includes(moveIndex))\n        .some(combo => combo.every(index => board[index] === board[combo[0]]));\n};\nconst handleRandomMove = (board) => {\n    let moveIndex = Math.floor(Math.random() * 9);\n    // If random move is already taken, try again\n    while (board[moveIndex]) {\n        moveIndex = Math.floor(Math.random() * 9);\n    }\n    return moveIndex;\n};\nexport const getComputerMove = (board, difficulty, computerLetter) => {\n    var _a, _b;\n    const moveCount = board.reduce((prevValue, cell) => prevValue + (cell ? 1 : 0), 0);\n    if (moveCount <= 1 || difficulty === DIFFICULTIES.EASY) {\n        return handleRandomMove(board);\n    }\n    const availableCombinations = WINNING_COMBOS.filter(combo => combo.some(index => !board[index]));\n    console.log(availableCombinations);\n    // Check if computer can win (runs on normal difficulty)\n    const winningMove = (_a = availableCombinations.find(combo => {\n        // Check if computer has two moves in a combo and there is an empty cell\n        const computerCount = combo.filter(index => board[index] === computerLetter).length;\n        const hasEmptyCell = combo.some(index => !board[index]);\n        return computerCount === 2 && hasEmptyCell;\n    })) === null || _a === void 0 ? void 0 : _a.find(index => !board[index]);\n    // If computer can win, make that move\n    if (typeof winningMove === 'number') {\n        return winningMove;\n    }\n    // Check if player can win (runs on normal difficulty)\n    const losingMove = (_b = availableCombinations.find(combo => {\n        // Check if player has two moves in a combo and there is an empty cell\n        const playerCount = combo.filter(index => board[index] && board[index] !== computerLetter).length;\n        const hasEmptyCell = combo.some(index => !board[index]);\n        return playerCount === 2 && hasEmptyCell;\n    })) === null || _b === void 0 ? void 0 : _b.find(index => !board[index]);\n    // If player can win, block them\n    if (typeof losingMove === 'number') {\n        return losingMove;\n    }\n    // if (difficulty !== DIFFICULTIES.HARD) {\n    return handleRandomMove(board);\n    // }\n    // return 0\n};\n// function onEdit2(e) {\n//   //Created By Kennen Lawrence\n//   const {range, value} = e\n//   const activeSheet = range.getSheet()\n//   const boardRange = activeSheet.getRange(5,2,3,3);\n//   const versus = activeSheet.getRange(2,3).getValue();\n//   if (versus !== 'Computer') {\n//     handlePvpMove(activeSheet)\n//     return\n//   }\n//   const board = boardRange.getValues()\n//   Logger.log(board)\n//   const count = board.reduce(\n//     (prevValue, row) => prevValue + row.reduce(\n//       (rowValue, column) => (column ? rowValue + 1 : rowValue),\n//       0\n//     ),\n//     0\n//   )\n//   Logger.log(`Count: ${count}`)\n//   if (!count) {\n//     Logger.log(\"Empty\");\n//     return\n//   }\n//   const userC = user.getColumn() - 2\n//   const userR = user.getRow() - 5\n//   let aiC = userC\n//   let aiR = userR\n//   const userTeamCheckRange = activeSheet.getRange(1, 1)\n//   const userTeamCheck = userTeamCheckRange.getValue()\n//   const aiTeam = userTeamCheck === 'X' ? 'O' : 'X'\n//   // If there is only one move, just play a random square\n//   if (count === 1) {\n//     // If random move is same as user, try again\n//     while (aiC == userC && aiR == userR) {\n//       aiC = Math.floor(Math.random() * 3);\n//       aiR = Math.floor(Math.random() * 3);\n//     }\n//     board[aiR][aiC] = aiTeam;\n//     range.setValues(board);\n//     userTeamCheckRange.setValue(userTeam);\n//     return\n//   }\n//   // Prevent cheating if user plays as other character\n//   if (userTeam !== userTeamCheck) {\n//     board[aiR][aiC] = userTeamCheck;\n//   }\n//   var uTwo=[[0,0],[0,0],[0,0],[0,0]]\n//   var aTwo=[[0,0],[0,0],[0,0],[0,0]]\n//   // Check for user and AI score\n//   for (i = 0; i < 3; i++) {\n//     for (j = 0; j < 3; j++) {\n//       if (board[i][j] === userTeamCheck) { uTwo[i][0]++ } // across row\n//       if (board[j][i] === userTeamCheck) { uTwo[i][1]++ } // down column\n//       if (board[i][j] === aiTeam) { aTwo[i][0]++ } // across row\n//       if (board[j][i] === aiTeam) { aTwo[i][1]++ } // down column\n//     }\n//     if (uTwo[i][0] === 3 || uTwo[i][1] === 3) {\n//       handleEndGame('user')\n//       return\n//     }\n//   }\n//   for (i = 0; i < 3; i++) {\n//     for (var k = 0; k < 3; k++) {\n//       if (aTwo[i][0] === 2 && !uTwo[i][0] && !board[i][k]) {\n//         handleAiWon(aiTeam, i, k, range, board)\n//         return\n//       }\n//       if (aTwo[i][1] === 2 && !uTwo[i][1] && !board[k][i]) {\n//         handleAiWon(aiTeam, k, i, range, board)\n//         return\n//       }\n//     }\n//   }\n//   // Check Diagnals\n//   j = 3;\n//   for (i = 0; i < 3; i++) {\n//     j--;\n//     if (board[i][i] === userTeamCheck) { uTwo[3][0]++ }\n//     if (board[i][j] === userTeamCheck) { uTwo[3][1]++ }\n//     if (board[i][i] === aiTeam) { aTwo[3][0]++; }\n//     if (board[i][j] === aiTeam) { aTwo[3][1]++ }\n//   }\n//   if (uTwo[3][0] === 3 || uTwo[3][1] === 3) {\n//     handleEndGame('user')\n//     return\n//   }\n//   if (aTwo[3][0] === 2 && uTwo[3][0] === 0) {\n//     for (var k = 0; k < 3; k++) {\n//       if (!board[k][k]) {\n//         handleAiWon(aiTeam, k, k, range, board)\n//         return\n//       }\n//     }\n//   }\n//   if (aTwo[3][1] === 2 && !uTwo[3][1]) {\n//     j = 3\n//     for (var k = 0; k < 3; k++) {\n//       j--\n//       if (!board[k][j]) {\n//         handleAiWon(aiTeam, k, j, range, board)\n//         return\n//       }\n//     }\n//   }\n//   if (uTwo[3][0] === 2 && !aTwo[3][0]) {\n//     for (var k = 0; k < 3; k++) {\n//       if (board[k][k]) {\n//         continue\n//       }\n//       board[k][k] = aiTeam\n//       range.setValues(board)\n//       return\n//     }\n//   }\n//   if (uTwo[3][1] === 2 && !aTwo[3][1]) {\n//     j = 3\n//     for (var k = 0; k < 3; k++) {\n//       j--\n//       if (board[k][j]) {\n//         continue\n//       }\n//       board[k][j] = aiTeam\n//       range.setValues(board)\n//       return\n//     }\n//   }\n//   for (i = 0;i < 3; i++) {\n//     if (uTwo[i][0] == 3 || uTwo[i][1] == 3) {\n//       handleEndGame('user')\n//       return\n//     }\n//     if (uTwo[i][0] == 2 && !aTwo[i][0]) {\n//       for (var k = 0; k < 3; k++) {\n//         if (!board[i][k]) {\n//           board[i][k] = aiTeam\n//           range.setValues(board)\n//           return\n//         }\n//       }\n//     }\n//     if (uTwo[i][1] == 2 && aTwo[i][1] == 0) {\n//       for (var k = 0; k < 3; k++) {\n//         if (!board[k][i]) {\n//           board[k][i] = aiTeam\n//           range.setValues(board)\n//           return\n//         }\n//       }\n//     }\n//   }\n//   if (count === 9) {\n//     handleEndGame('tie')\n//   }\n//   for (i = 0; i < 3; i++) {\n//     if (!uTwo[i][0] && aTwo[i][0]) {\n//       for (var k = 0; k < 3; k++) {\n//         if (!board[i][k]) {\n//           board[i][k] = aiTeam\n//           range.setValues(board)\n//           return\n//         }\n//       }\n//     }\n//     if (!uTwo[i][1] && aTwo[i][1]) {\n//       for (var k = 0; k < 3; k++) {\n//         if (!board[k][i]) {\n//           board[k][i] = aiTeam\n//           range.setValues(board)\n//           return\n//         }\n//       }\n//     }\n//   }\n//   if (aTwo[3][0] && !uTwo[3][0]) {\n//     for (var k = 0; k < 3; k++) {\n//       if (board[k][k]) {\n//         continue\n//       }\n//       handleAiWon(aiTeam, k, k, range, board)\n//       return\n//     }\n//   }\n//   if (aTwo[3][1] && !uTwo[3][1]) {\n//     j = 3\n//     for (var k = 0; k < 3; k++) {\n//       j--\n//       if (!board[k][j]) {\n//         board[k][j] = aiTeam\n//         range.setValues(board)\n//         range.getValues()\n//         return\n//       }\n//     }\n//   }\n//   aiC = userC\n//   aiR = userR\n//   while(board[aiR][aiC]) {\n//     aiC = Math.floor(Math.random() * 3);\n//     aiR = Math.floor(Math.random() * 3);\n//   }\n//   board[aiR][aiC] = aiTeam;\n//   range.setValues(board);\n//   return\n// }\n// const handlePvpMove = (sheet) => {\n//     const winner = sheet.getRange(3,2).getValue()?.split(' ')?.[1]\n//     if (winner) {\n//       PvP(winner)\n//     }\n// }\n// const handleAiWon = (aiTeam, rowIndex, columnIndex, boardRange, boardData) => {\n//   boardData[rowIndex][columnIndex] = aiTeam\n//   boardRange.setValues(boardData)\n//   handleEndGame('ai')\n// }\n// const handleEndGame = (winner) => {\n//   const options = {\n//     tie: {\n//       row: 7,\n//       message: 'You have tied against the computer! The board will reset upon closing this notification!',\n//       title: 'TIE!'\n//     },\n//     user: {\n//       row: 6,\n//       message: 'You have won this match against the computer! The board will reset upon closing this notification!',\n//       title: 'You Won!',\n//     },\n//     ai: {\n//       row: 5,\n//       message: 'The computer has won this match! The board will reset upon closing this notification!',\n//       title: 'You Lost!',\n//     },\n//   }\n//   ui.alert(\n//     options[winner].title,\n//     options[winner].message,\n//     ui.ButtonSet.OK\n//   );\n//   const range = SpreadsheetApp\n//     .getActiveSpreadsheet()\n//     .getSheetByName('Shhhhh....')\n//     .getRange(options[winner].row, 1)\n//   range.setValue(range.getValue() + 1)\n//   boardClear()\n// }\n// const PvP = (winner) => {\n//   var ui = SpreadsheetApp.getUi()\n//   ui.alert(\n//     `Player ${winner} won!`,\n//     `Player ${winner}! You have won this match! The board will reset upon closing this notification!`,\n//     ui.ButtonSet.OK\n//   )\n//   boardClear()\n// }\n","import React, { createContext, useReducer, useContext } from 'react';\nimport { GAME_MODES, DIFFICULTIES, PLAYER_LETTERS } from 'Components/TicTacToe/constants/TicTacToeConstants';\nimport { getIsWinningMove, getComputerMove } from 'Components/TicTacToe/helpers';\nconst initialState = {\n    gameMode: GAME_MODES.COMPUTER,\n    difficulty: DIFFICULTIES.NORMAL,\n    playerLetter: PLAYER_LETTERS.X,\n    currentTurn: PLAYER_LETTERS.X,\n    board: Array(9).fill(''),\n    isGameActive: false,\n    winner: null,\n    isBoardFull: false,\n};\nconst getIsBoardFull = (board) => board.every(cell => cell);\nconst makePlayerMove = (state, action) => {\n    const { index } = action;\n    if (state.board[index] !== '' || state.winner) {\n        return state;\n    }\n    const newBoard = [...state.board];\n    newBoard[index] = state.currentTurn;\n    if (getIsWinningMove(newBoard, index)) {\n        return Object.assign(Object.assign({}, state), { board: newBoard, winner: state.currentTurn });\n    }\n    const isBoardFull = getIsBoardFull(newBoard);\n    if (state.gameMode !== GAME_MODES.COMPUTER || isBoardFull) {\n        return Object.assign(Object.assign({}, state), { board: newBoard, currentTurn: state.currentTurn === PLAYER_LETTERS.X ? PLAYER_LETTERS.O : PLAYER_LETTERS.X, isGameActive: true, isBoardFull });\n    }\n    return makeComputerMove(Object.assign(Object.assign({}, state), { board: newBoard }));\n};\nconst makeComputerMove = (state) => {\n    const computerLetter = state.playerLetter === PLAYER_LETTERS.X ? PLAYER_LETTERS.O : PLAYER_LETTERS.X;\n    const computerMoveIndex = getComputerMove(state.board, state.difficulty, computerLetter);\n    const newBoard = [...state.board];\n    newBoard[computerMoveIndex] = computerLetter;\n    const isBoardFull = getIsBoardFull(newBoard);\n    const newState = Object.assign(Object.assign({}, state), { board: newBoard, isBoardFull, isGameActive: true });\n    return getIsWinningMove(newBoard, computerMoveIndex)\n        ? Object.assign(Object.assign({}, newState), { winner: computerLetter }) : newState;\n};\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'UPDATE_FIELD':\n            return Object.assign(Object.assign({}, state), { [action.payload.field]: action.payload.value });\n        case 'SET_PLAYER_LETTER':\n            return Object.assign(Object.assign({}, state), { playerLetter: action.payload, currentTurn: action.payload });\n        case 'START_GAME':\n            return Object.assign(Object.assign({}, state), { isGameActive: true });\n        case 'RESET_GAME':\n            return Object.assign(Object.assign({}, state), { board: Array(9).fill(''), isGameActive: false, currentTurn: state.playerLetter, winner: null, isBoardFull: false });\n        case 'MAKE_PLAYER_MOVE':\n            return makePlayerMove(state, action);\n        case 'MAKE_COMPUTER_MOVE':\n            return makeComputerMove(state);\n        default:\n            return state;\n    }\n};\nconst TicTacToeContext = createContext(undefined);\nexport const useTicTacToeContext = () => {\n    const context = useContext(TicTacToeContext);\n    if (!context) {\n        throw new Error('useTicTacToe must be used within a TicTacToeProvider');\n    }\n    return context;\n};\nexport const TicTacToeProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return (React.createElement(TicTacToeContext.Provider, { value: { state, dispatch } }, children));\n};\n","import React from 'react';\nimport { PLAYER_LETTERS } from 'Components/TicTacToe/constants/TicTacToeConstants';\nimport { useTicTacToeContext } from './context/TicTacToeContext';\nconst LetterSelect = () => {\n    const { state, dispatch } = useTicTacToeContext();\n    const { gameMode, isGameActive, playerLetter } = state;\n    const letterSelectLabel = gameMode === 'computer'\n        ? 'Choose your letter:'\n        : 'Who is going first?';\n    return !isGameActive ? (React.createElement(\"div\", { className: \"flex items-center space-x-4\" },\n        React.createElement(\"div\", { className: \"flex items-center\" },\n            React.createElement(\"label\", { className: \"mr-2 font-medium\" }, letterSelectLabel),\n            React.createElement(\"select\", { value: playerLetter, onChange: ({ target: { value } }) => dispatch({ type: 'SET_PLAYER_LETTER', payload: value }), className: \"border p-1 rounded\" },\n                React.createElement(\"option\", { value: PLAYER_LETTERS.X }, PLAYER_LETTERS.X),\n                React.createElement(\"option\", { value: PLAYER_LETTERS.O }, PLAYER_LETTERS.O))))) : null;\n};\nexport default LetterSelect;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useTicTacToeContext } from 'Components/TicTacToe/context/TicTacToeContext';\nconst Board = () => {\n    const { state, dispatch } = useTicTacToeContext();\n    const { board } = state;\n    const boardCellClass = 'flex items-center justify-center border border-blue-700 hover:bg-blue-50 transition-colors';\n    return (React.createElement(\"div\", { className: \"flex justify-center\" },\n        React.createElement(\"div\", { className: \"w-64 h-64 bg-white shadow-lg rounded-lg overflow-hidden\" },\n            React.createElement(\"div\", { className: \"grid grid-cols-3 grid-rows-3 h-full\" }, board.map((cell, index) => (React.createElement(\"div\", { key: index, className: classNames(boardCellClass, {\n                    'cursor-pointer': !cell,\n                    'cursor-not-allowed': cell,\n                }), onClick: () => dispatch({ type: 'MAKE_PLAYER_MOVE', index }) },\n                React.createElement(\"span\", { className: \"text-3xl font-bold\" }, cell))))))));\n};\nexport default Board;\n","import React from 'react';\nimport { useTicTacToeContext } from 'Components/TicTacToe/context/TicTacToeContext';\nconst ResetButton = () => {\n    const { state: { isGameActive }, dispatch } = useTicTacToeContext();\n    return isGameActive ? (React.createElement(\"button\", { onClick: () => dispatch({ type: 'RESET_GAME' }), className: \"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors\" }, \"Reset\")) : null;\n};\nexport default ResetButton;\n","import React from 'react';\nimport { DIFFICULTIES, GAME_MODES } from 'Components/TicTacToe/constants/TicTacToeConstants';\nimport { useTicTacToeContext } from 'Components/TicTacToe/context/TicTacToeContext';\nconst ModeSelect = () => {\n    const { state, dispatch } = useTicTacToeContext();\n    const { gameMode, difficulty, isGameActive } = state;\n    const updateGameMode = (value) => {\n        dispatch({ type: 'UPDATE_FIELD', payload: { field: 'gameMode', value } });\n    };\n    const setDifficulty = (value) => {\n        dispatch({ type: 'UPDATE_FIELD', payload: { field: 'difficulty', value } });\n    };\n    return (React.createElement(\"div\", { className: \"flex flex-wrap items-center mb-6 space-x-4\" },\n        React.createElement(\"div\", null,\n            React.createElement(\"label\", { className: \"mr-2 font-medium\" }, \"Player Vs:\"),\n            React.createElement(\"select\", { value: gameMode, onChange: ({ target: { value } }) => updateGameMode(value), className: \"border p-1 rounded\", disabled: isGameActive },\n                React.createElement(\"option\", { value: GAME_MODES.COMPUTER }, \"Computer\"),\n                React.createElement(\"option\", { value: GAME_MODES.PERSON }, \"Person\"))),\n        gameMode === GAME_MODES.COMPUTER ? (React.createElement(\"div\", null,\n            React.createElement(\"label\", { className: \"mr-2 font-medium\" }, \"Difficulty:\"),\n            React.createElement(\"select\", { value: difficulty, onChange: ({ target: { value } }) => setDifficulty(value), className: \"border p-1 rounded\", disabled: isGameActive },\n                React.createElement(\"option\", { value: DIFFICULTIES.EASY }, \"Easy\"),\n                React.createElement(\"option\", { value: DIFFICULTIES.NORMAL }, \"Normal\"),\n                React.createElement(\"option\", { value: DIFFICULTIES.HARD }, \"Hard\")))) : null));\n};\nexport default ModeSelect;\n","import React from 'react';\nimport { GAME_MODES } from 'Components/TicTacToe/constants/TicTacToeConstants';\nimport { useTicTacToeContext } from 'Components/TicTacToe/context/TicTacToeContext';\nconst WinnerAnnouncement = () => {\n    const { state, dispatch } = useTicTacToeContext();\n    const { gameMode, winner, playerLetter } = state;\n    const getWinnerText = () => {\n        if (gameMode !== GAME_MODES.COMPUTER) {\n            return winner;\n        }\n        return winner === playerLetter ? 'You' : 'The Computer';\n    };\n    return winner ? (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: \"text-xl font-semibold\" }, \"Better luck next time!\"),\n        React.createElement(\"span\", { className: \"text-4xl font-bold\" },\n            getWinnerText(),\n            \" Wins!\"))) : null;\n};\nexport default WinnerAnnouncement;\n","import React from 'react';\nimport { useTicTacToeContext } from 'Components/TicTacToe/context/TicTacToeContext';\nconst TieAnnouncement = () => {\n    const { state, dispatch } = useTicTacToeContext();\n    const { winner, isBoardFull } = state;\n    return !winner && isBoardFull ? (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: \"text-xl font-semibold\" }, \"Better luck next time!\"),\n        React.createElement(\"span\", { className: \"text-4xl font-bold\" }, \"Tied Game!\"))) : null;\n};\nexport default TieAnnouncement;\n","import React from 'react';\nimport WinnerAnnouncement from 'Components/TicTacToe/WinnerAnnouncement';\nimport TieAnnouncement from 'Components/TicTacToe/TieAnnouncement';\nconst GameResult = () => (React.createElement(React.Fragment, null,\n    React.createElement(WinnerAnnouncement, null),\n    React.createElement(TieAnnouncement, null)));\nexport default GameResult;\n","import React from 'react';\nimport { useTicTacToeContext } from 'Components/TicTacToe/context/TicTacToeContext';\nconst TurnTracker = () => {\n    const { state, dispatch } = useTicTacToeContext();\n    const { isGameActive, winner, isBoardFull, currentTurn } = state;\n    return isGameActive && !isBoardFull && !winner ? (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: \"text-xl font-semibold\" }, \"Turn\"),\n        React.createElement(\"span\", { className: \"text-4xl font-bold\" }, currentTurn))) : null;\n};\nexport default TurnTracker;\n","import React from 'react';\nimport { GAME_MODES } from 'Components/TicTacToe/constants/TicTacToeConstants';\nimport { useTicTacToeContext } from 'Components/TicTacToe/context/TicTacToeContext';\nimport GameResult from 'Components/TicTacToe/GameResult';\nimport TurnTracker from 'Components/TicTacToe/TurnTracker';\nconst BoardHelper = () => {\n    const { state, dispatch } = useTicTacToeContext();\n    const { gameMode, currentTurn, isGameActive, isBoardFull, winner } = state;\n    return (React.createElement(\"div\", { className: \"flex flex-col items-center mb-4\" },\n        React.createElement(GameResult, null),\n        React.createElement(TurnTracker, null),\n        !isGameActive && gameMode === GAME_MODES.COMPUTER ? (React.createElement(React.Fragment, null,\n            React.createElement(\"span\", { className: \"text-sm text-center\" }, \"Either click a cell to play first, or press \\\"Start\\\" to let the computer begin.\"),\n            React.createElement(\"button\", { onClick: () => dispatch({ type: 'MAKE_COMPUTER_MOVE' }), className: \"bg-blue-500 text-white px-3 py-1 rounded mt-2 hover:bg-blue-600 transition-colors\" }, \"Start\"))) : null,\n        !isGameActive && gameMode !== GAME_MODES.COMPUTER ? (React.createElement(\"span\", { className: \"text-gray-400 text-sm text-center\" }, \"Awaiting game...\")) : null));\n};\nexport default BoardHelper;\n","import React from 'react';\nimport LetterSelect from 'Components/TicTacToe/LetterSelect';\nimport Board from 'Components/TicTacToe/Board';\nimport { TicTacToeProvider } from 'Components/TicTacToe/context/TicTacToeContext';\nimport ResetButton from 'Components/TicTacToe/ResetButton';\nimport ModeSelect from 'Components/TicTacToe/ModeSelect';\nimport BoardHelper from 'Components/TicTacToe/BoardHelper';\nconst TicTacToe = () => (React.createElement(TicTacToeProvider, null,\n    React.createElement(\"div\", { className: \"p-8\" },\n        React.createElement(ModeSelect, null),\n        React.createElement(BoardHelper, null),\n        React.createElement(Board, null),\n        React.createElement(\"div\", { className: \"flex justify-center mt-4\" },\n            React.createElement(LetterSelect, null),\n            React.createElement(ResetButton, null)))));\nexport default TicTacToe;\n","import React, { useState } from 'react';\nimport TicTacToe from 'Components/TicTacToe/TicTacToe';\nimport { FaArrowLeft } from 'react-icons/fa';\n// @todo: Refactor this file\n// Placeholder Go component\nconst GoGame = () => {\n    return (React.createElement(\"div\", null,\n        React.createElement(\"h2\", { className: \"text-2xl font-bold mb-4\" }, \"GO\"),\n        React.createElement(\"p\", { className: \"text-gray-600\" }, \"GO game coming soon...\")));\n};\nconst Games = () => {\n    const [selectedGame, setSelectedGame] = useState('none');\n    // Handler to go back to game selection\n    const handleBack = () => {\n        setSelectedGame('none');\n    };\n    // If a game is selected, render that game with a header that includes a back arrow.\n    if (selectedGame !== 'none') {\n        return (React.createElement(\"section\", { className: \"p-8\" },\n            React.createElement(\"div\", { className: \"flex items-center mb-4\" },\n                React.createElement(\"button\", { onClick: handleBack, className: \"mr-2 text-blue-600 hover:text-blue-800\" },\n                    React.createElement(FaArrowLeft, { size: 20 })),\n                React.createElement(\"h1\", { className: \"text-3xl font-bold\" }, selectedGame === 'ticTacToe' ? 'Tic Tac Toe' : 'GO')),\n            React.createElement(\"div\", null, selectedGame === 'ticTacToe' ? React.createElement(TicTacToe, null) : React.createElement(GoGame, null))));\n    }\n    // Otherwise, render the game selection buttons.\n    return (React.createElement(\"section\", { className: \"p-8\" },\n        React.createElement(\"h1\", { className: \"text-3xl font-bold mb-6\" }, \"Games\"),\n        React.createElement(\"div\", { className: \"grid grid-cols-1 sm:grid-cols-2 gap-6\" },\n            React.createElement(\"button\", { onClick: () => setSelectedGame('ticTacToe'), className: \"bg-blue-100 hover:scale-105 transition-transform p-6 rounded-lg shadow focus:outline-none\" },\n                React.createElement(\"div\", { className: \"flex flex-col items-center\" },\n                    React.createElement(\"img\", { src: \"/svg/tic-tac-toe.svg\", alt: \"Tic-Tac-Toe Logo\", className: \"w-16 h-16 object-contain\" }),\n                    React.createElement(\"span\", { className: \"text-lg font-medium\" }, \"Tic Tac Toe\"))),\n            React.createElement(\"button\", { onClick: () => setSelectedGame('go'), className: \"bg-blue-100 hover:scale-105 transition-transform p-6 rounded-lg shadow focus:outline-none\" },\n                React.createElement(\"div\", { className: \"flex flex-col items-center\" },\n                    React.createElement(\"div\", { className: \"bg-blue-300 h-16 w-16 mb-4 rounded-full flex items-center justify-center\" },\n                        React.createElement(\"span\", { className: \"text-white font-bold\" }, \"G\")),\n                    React.createElement(\"span\", { className: \"text-lg font-medium\" }, \"GO\"))))));\n};\nexport default Games;\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"],"names":["PLAYER_LETTERS","GAME_MODES","DIFFICULTIES","WINNING_COMBOS","getIsWinningMove","board","moveIndex","filter","combo","includes","some","every","index","handleRandomMove","Math","floor","random","initialState","gameMode","difficulty","playerLetter","currentTurn","Array","fill","isGameActive","winner","isBoardFull","getIsBoardFull","cell","makeComputerMove","state","computerLetter","computerMoveIndex","_a","_b","reduce","prevValue","availableCombinations","console","log","winningMove","find","computerCount","length","hasEmptyCell","losingMove","playerCount","getComputerMove","newBoard","newState","Object","assign","reducer","action","type","payload","field","value","makePlayerMove","TicTacToeContext","createContext","undefined","useTicTacToeContext","context","useContext","Error","TicTacToeProvider","children","dispatch","useReducer","Provider","letterSelectLabel","className","onChange","target","map","key","onClick","updateGameMode","disabled","setDifficulty","GoGame","selectedGame","setSelectedGame","useState","size","src","alt","hasOwn","hasOwnProperty","classNames","classes","i","arguments","arg","appendClass","parseValue","isArray","apply","toString","prototype","call","newClass","module","exports","default"],"sourceRoot":""}